<!DOCTYPE html>
<html lang="en">
<head>
   <meta charset="utf-8">
   <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=0">
   <title>Students Offline | KJSCE</title>
   <script src="https://cdn.jsdelivr.net/npm/exceljs/dist/exceljs.min.js"></script>

   <link rel="shortcut icon" href="/img/favicon.png">
   <link rel="stylesheet"
      href="https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,500;0,600;0,700;1,400&amp;display=swap">
   <link rel="stylesheet" href="/plugins/bootstrap/css/bootstrap.min.css">
   <link rel="stylesheet" href="/plugins/fontawesome/css/fontawesome.min.css">
   <link rel="stylesheet" href="/plugins/fontawesome/css/all.min.css">
   <link rel="stylesheet" href="/plugins/datatables/datatables.min.css">
   <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/1.6.7/axios.js"></script>
   <link rel="stylesheet" href="/css/style.css">
   <link rel="icon" href="/img/logo-small.png" type="image/x-icon">
   <link rel="shortcut icon" href="/img/logo-small.png" type="image/x-icon">
   <style>
      .header {
    padding-left: 0 !important;
    padding-right: 0 !important;
    position: fixed;
}
   </style>
</head>

<body>
   <div class="main-wrapper">
      <div class="header">
         <div class="header-left">
            <a href="index.html" class="logo">
               <img src="/img/logo.svg" alt="Logo">
            </a>
            <a href="index.html" class="logo logo-small">
               <img src="/img/logo-small.svg" alt="Logo" width="30" height="45">
            </a>
         </div>
         <a href="javascript:void(0);" id="toggle_btn">
            <i class="fas fa-align-left"></i>
         </a>
         <div class="top-nav-search">
            <form>
               <input type="text" class="form-control" placeholder="Search here">
               <button class="btn" type="submit"><i class="fas fa-search"></i></button>
            </form>
         </div>
         <a class="mobile_btn" id="mobile_btn">
            <i class="fas fa-bars"></i>
         </a>
         <ul class="nav user-menu">
            <li class="nav-item dropdown noti-dropdown">
               <a href="#" class="dropdown-toggle nav-link" data-toggle="dropdown">
                  <i class="far fa-bell"></i> <span class="badge badge-pill">3</span>
               </a>
               <div class="dropdown-menu notifications">
                  <div class="topnav-dropdown-header">
                     <span class="notification-title">Notifications</span>
                     <a href="javascript:void(0)" class="clear-noti"> Clear All </a>
                  </div>
                  <div class="noti-content">
                     <ul class="notification-list">
                       
                     </ul>
                  </div>
                  <div class="topnav-dropdown-footer">
                     <a href="#">View all Notifications</a>
                  </div>
               </div>
            </li>
            <li class="nav-item dropdown has-arrow">
               <a href="#" class="dropdown-toggle nav-link" data-toggle="dropdown">
                  <span class="user-img"><img class="rounded-circle" src="/img/profiles/avatar-01.png" width="31"
                        alt="Ryan Taylor"></span>
               </a>
               <div class="dropdown-menu">
                  <a class="dropdown-item" onclick="logout()">Logout</a>
               </div>
            </li>
         </ul>
      </div>
      <div class="sidebar" id="sidebar">
         <div class="sidebar-inner slimscroll">
            <div id="sidebar-menu" class="sidebar-menu">
               <ul>


                  <li >
                     <a href="http://localhost:8000/home"><i class="fas fa-user-graduate"></i> <span> Dashboard</span><span
                           class="menu-arrow"></span></a>

                  </li >
                  <li class="">
                     <a href="http://localhost:8000/online"><i class="fas fa-code"></i> <span>Students Online</span> <span
                           class="menu-arrow"></span></a>

                  </li>
                  <li class="">
                     <a href="http://localhost:8000/history"><i class="fas fa-chalkboard-teacher"></i> <span> Student History</span>
                        <span class="menu-arrow"></span></a>
                     <ul>

                     </ul>
                  </li>
                  <li class="active">
                     <a href="http://localhost:8000/offline"><i class="fas fa-building"></i> <span> Students Offline</span> <span
                           class="menu-arrow"></span></a>

                  </li>
                  

               </ul>
            </div>
         </div>
      </div>
      <div class="modal fade" id="editModal" tabindex="-1" role="dialog" aria-labelledby="editModalLabel" aria-hidden="true">
         <div class="modal-dialog" role="document">
           <div class="modal-content">
             <div class="modal-header">
               <h5 class="modal-title" id="editModalLabel">Edit Student Information</h5>
               <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                 <span aria-hidden="true">&times;</span>
               </button>
             </div>
             <div class="modal-body">
               <form id="editForm">
                 <input type="hidden" id="editId">
                 <div class="form-group">
                   <label for="editName">Name</label>
                   <input type="text" class="form-control" id="editName" disabled>
                 </div>
                 <div class="form-group">
                   <label for="editSemester">Semester</label>
                   <input type="text" class="form-control" id="editSemester" disabled>
                 </div>
                 <div class="form-group">
                  <label for="editSemester">Roll No</label>
                  <input type="text" class="form-control" id="editRollNumber">
                </div>
                 <div class="form-group">
                   <label for="editBranch">Branch</label>
                   <input type="text" class="form-control" id="editBranch" disabled>
                 </div>
                 <div class="form-group">
                   <label for="editEmail">Email</label>
                   <input type="email" class="form-control" id="editEmail" disabled>
                 </div>
                 <div class="form-group">
                   <label for="editType">Course Type</label>
                   <input type="text" class="form-control" id="editType">
                 </div>
                 <div class="form-group">
                   <label for="editCourseName">Course Name</label>
                   <input type="text" class="form-control" id="editCourseName">
                 </div>
                 <div class="form-group">
                  <label for="editCourseName">Academic Year</label>
                  <input type="text" class="form-control" id="editAcademicYear" disabled>
                </div>
               </form>
             </div>
             <div class="modal-footer">
               <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
               <button type="button" class="btn btn-primary" onclick="updateStudent()">Save changes</button>
             </div>
           </div>
         </div>
       </div>
      <div class="page-wrapper">
         <div class="content container-fluid">
            <div class="page-header">
               <div class="row align-items-center">
                  <div class="col">
                     <h3 class="page-title">Students</h3>
                     <ul class="breadcrumb">
                        <li class="breadcrumb-item"><a href="admin.html">Dashboard</a></li>
                        <li class="breadcrumb-item active">Students</li>
                     </ul>
                  </div>
                  <!-- <button id="autoAllocateBtn">Start Auto Allocation</button>
                  <div id="result"></div> -->
                  <div class="col-auto text-right float-right ml-auto">
                     <a href="#" class="btn btn-outline-primary mr-2" style="background-color: red;color: white;"
                        onclick="downloadExcel()"><i class="fas fa-download"></i> Download</a>
                  </div>
               </div>
            </div>
            <div class="row" style="margin-bottom: 20px;">
               <div class="col col-12">Filters</div>
               <div class="col col-3 ">
                  <label>Semester</label>
                  <select id="semesterFilter"  class="form-select" aria-label="Default select example">
                     <option>--Select Semester--</option>
                     <option>V</option>
                     <option>VI</option>
                     <option>VII</option>
                  </select>
               </div>
               <div class="col col-3 ">
                  <label>Course Type</label>
                  <select id="courseFilter"  class="form-select" aria-label="Default select example">
                     <option>--Select Course Type--</option>
                     <option>OEHM</option>
                     <option>OET</option>
                  </select>
               </div>
               <div class="col col-2 ">
                  <label>Branch</label>
                  <select id="branchFilter"  class="form-select" aria-label="Default select example">
                     <option>--Select Branch--</option>
                     <option>IT</option>
                     <option>COMPS</option>
                  </select>
               </div>
               

               <div class="col col-3 ">
                  <button class="btn btn-primary" onclick="getdata()">Apply Filter</button>
               </div>
               <div class="col col-1 ">
                  <button class="btn btn-primary" onclick="resetFilter()">Reset</button>
               </div>
            </div>
            <div class="row">
               <div class="col-sm-12">
                  <div class="card card-table">
                     <div class="card-body">
                        <div class="table-responsive">
                           <table class="table table-hover table-center mb-0 datatable" id="data-table">
                              <thead>
                                 <tr>
                                    <th>ID</th>
                                    <th>Name</th>
                                    <th>Semester</th>
                                    <th>Branch</th>
                                    <th>Email</th>
                                    <th>Course Type</th>
                                    <th>Courses Enrolled</th>
                                    <th>Preference</th>
                                    <th>Faculty Name</th>
                                    <th>Faculty Email</th>
                                    <th>Enrolled Year</th>
                                    <th>Action</th>
                                 </tr>
                              </thead>
                              <tbody id="tbody">

                              </tbody>
                           </table>
                        </div>
                     </div>
                  </div>
               </div>
            </div>
         </div>
         <footer>
            <p>Copyright © KJ Somaiya College Of Engineering</p>
         </footer>
      </div>
   </div>

   <div class="modals fade" id="exampleModals" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
      <div class="modal-dialog">
         <div class="modal-content">
            <div class="modal-header">
               <h1 class="modal-title fs-5" id="exampleModalLabel">Modal title</h1>
               <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
               ...
            </div>
            <div class="modal-footer">
               <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
               <button type="button" class="btn btn-primary">Save changes</button>
            </div>
         </div>
      </div>
   </div>






   <div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle"
      aria-hidden="true">
      <div class="modal-dialog" role="document">
         <div class="modal-content">
            <div class="modal-header">
               <h5 class="modal-title" id="exampleModalLabel">Do you really want to Delete</h5>
               <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                  <span aria-hidden="true">&times;</span>
               </button>
            </div>

            <div class="modal-footer">
               <button type="button" class="btn btn-secondary" data-dismiss="modal">NO</button>
               <button type="button" class="btn btn-primary" onclick="deletePermission()"
                  data-dismiss="modal">Yes</button>
            </div>
         </div>
      </div>
   </div>
   <script src="/js/jquery-3.6.0.min.js"></script>
   <script src="/js/popper.min.js"></script>
   <script src="/plugins/bootstrap/js/bootstrap.min.js"></script>
   <script src="/plugins/slimscroll/jquery.slimscroll.min.js"></script>
   <!-- <script src="/plugins/datatables/datatables.min.js"></script> -->
   <script src="/js/script.js"></script>
   <script>
      getdata();
      async function downloadExcel() {

         // Create a new workbook
         const workbook = new ExcelJS.Workbook();
         const worksheet = workbook.addWorksheet('Sheet 1');

         // Define table headers
         const headers = [
            'ID',
            'Name',
            'Semester',
            'Branch',
            'Email',
            'Course Type',
            'Courses Enrolled',
            'Faculty Name',
            'Faculty Email',          
            'Enrolled year'
         ];

         // Add headers to the worksheet
         worksheet.addRow(headers);

         // Fetch table data
         const tableRows = document.querySelectorAll('#data-table tbody tr');

         // Iterate over table rows and add data to the worksheet
         tableRows.forEach(row => {
            const rowData = [];
            const cells = row.querySelectorAll('td');
            cells.forEach(cell => {
               rowData.push(cell.textContent.trim());
            });
            worksheet.addRow(rowData);
         });

         // Generate Excel file
         workbook.xlsx.writeBuffer()
            .then(buffer => {
               // Convert buffer to Blob
               const blob = new Blob([buffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });

               // Create download link
               const url = window.URL.createObjectURL(blob);
               const a = document.createElement('a');
               a.href = url;
               a.download = 'table_data.xlsx';
               
               // Append link to the body and trigger download
               document.body.appendChild(a);
               a.click();

               // Cleanup
               window.URL.revokeObjectURL(url);
               document.body.removeChild(a);
            })
            .catch(error => {
               console.error('Error generating Excel file:', error);
            });
            var data= await axios({
                  url:"/downloadData",
                  method: 'post'
               })
      }

      window.addEventListener('pageshow', function (event) {
         if (event.persisted) {
            location.reload();
         }
      });

      var semester = document.getElementById('semesterFilter').value;
      var type = document.getElementById('courseFilter').value;
      var branch = document.getElementById('branchFilter').value;


      async function getdata() {
         var tbody = '';
         var semester = document.getElementById('semesterFilter').value;
         var type = document.getElementById('courseFilter').value;
         var branch = document.getElementById('branchFilter').value;
         

         try {
            var data = await axios({
               url: "http://localhost:8000/getStudentDataOfflineAll",
               method: "post",
               data: { semester: semester, courseType: type, branch: branch,apprej:"approved" }
            });
            console.log(data.data);
            
            var list = data.data;
            
            if (data) {
               for (let i = 0; i < list.length; i++) {
                  console.log(list[i].course_name);
                     tbody = tbody + `<tr style="background-color:${list[i].color?"lightblue":"lightgreen"}">
                                       <td>${list[i].roll_number}</td>
                                       <td>
                                         
                                            ${list[i].student_name}
                                          
                                       </td>
                                       <td id="sem">${list[i].enrolled_semester}</td>
                                       <td>${list[i].branch}</td>

                                       <td>${list[i].email}</td>
                                       <td >${list[i].type}</td>
                                       <td >${list[i].course_name}</td>
                                       <td>${list[i].preference}</td>
                                          <td>${list[i].faculty_name}</td>
                                       <td>${list[i].faculty_email}</td>
                                       <td>${list[i].enrolled_academic_year}</td>
                                       
                                       <td class="text-center">
                                          <button type="button" class="btn btn-primary btn-sm" onclick="editStudent('${list[i].roll_number}', '${list[i].student_name}', '${list[i].enrolled_semester}', '${list[i].branch}', '${list[i].email}', '${list[i].type}', '${list[i].course_name}', '${list[i].faculty_name}', '${list[i].faculty_email}', '${list[i].enrolled_academic_year}','${list[i].course_id}')">
                                             <i class="fas fa-edit"></i> Edit
                                          </button>
                                          <button type="button" class="btn btn-danger btn-sm" onclick="confirmDelete('${list[i].email}','${list[i].course_id}','${list[i].type}','${list[i].enrolled_semester}')">
                                             <i class="fas fa-trash"></i> Delete
                                          </button>
                                       </td>
                                    </tr>
                                    `;
                  
               }
               document.getElementById('tbody').innerHTML = tbody;
            }
         } catch (e) {
            console.log("error is :", e);
         }
      }

      async function email(email,semester,type){
         console.log(email);
         showRejectionPopup( email, semester, type)
      }

      function getCheckedStudentNames() {
    const checkboxes = document.querySelectorAll('.checkbox:checked');
    let names = [];
    checkboxes.forEach((checkbox) => {
        names.push(checkbox.getAttribute('value'));
    });
    return names;
}
//console.log(getCheckedStudentNames());

      function showRejectionPopup( email, semester, type) {
    let subject = type.toLowerCase().includes('oet') ? 'Your OET Course Certificates are Rejected' : 'Your OEHM Course Certificate  is Rejected';
    let body = 'Kindly Resubmit the Certificates of the following courses : .\n';
    
    
    
        sendRejectionEmail( email, subject, body);
    
    
    //document.getElementById('emailPopup').style.display = "block";
}

 async function sendRejectionEmail(email, subject, body) {
   const studentNames = getCheckedStudentNames();
    const emailBody = "*"+studentNames.join('\n');
    console.log(emailBody)

    try {
        const response = await axios.post('http://localhost:8000/sendCourseLinkRejectEmail', {
            
            email: email,
            subject: subject,
            body: body+emailBody
        });
        
        if (response.data.success) {
            alert('Email sent successfully');
            // document.getElementById('emailPopup').style.display = "none";
        } else {
            alert('Failed to send email');
        }
    } catch (error) {
        console.error('Error sending email:', error);
        alert('An error occurred while sending the email');
    }
}


      var deletestdID;
      async function deletePermission() {
         console.log("delete : " + deletestdID);
         var sem = document.getElementById("sem").innerText;
         console.log("sem" + sem);
         var types = document.getElementById("types").innerText;
         console.log(`http://localhost:8000/deleteStudentDataSem${sem}${types}Online`);
         var deleteStudent = await axios({
            url: `http://localhost:8000/deleteStudentDataOnline`,
            method: "post",
            data: { id: deletestdID, semester: sem }
         });
         console.log(deleteStudent);
         console.log(deleteStudent.data.deleted);
         var result = deleteStudent.data.deleted;
         if (result == "yes") {
            //alert("Student Deleted");
            getdata();
         } else {
            alert("Error while deleting");
         }
      }


      async function deleteStudent(id) {
         console.log(id);
         deletestdID = id;
      }

      async function complete(id,email,semester,type){
         console.log(id,email,semester,type);
         var complete = await axios({
            url: `http://localhost:8000/getStudentDataOfflineAll`,
            method: "post",
            data: { id: id, email: email, semester: semester, type: type }
            });
            console.log(complete);
            if(complete.data.result==1){
               getdata();
            }else{
               alert("Error while deleting");
            }
      }
var oldcourse='';
var oldtype='';

async function updateStudent() {
  // Get values from the form
  const roll = document.getElementById('editRollNumber').value;
  const semester = document.getElementById('editSemester').value;
  const branch = document.getElementById('editBranch').value;
  const email = document.getElementById('editEmail').value;
  const type = document.getElementById('editType').value;
  const courseName = document.getElementById('editCourseName').value;
  var oldCourse=oldcourse;
  console.log(courseName)
  var ids= await axios({
   url: `http://localhost:8000/getCourseIdOffline`,
   method: "post",
   data: { courseName: courseName }
  })
  console.log(ids.data.id[0].course_code)
  var oldId=ids.data.id[0].course_code;
  var id= await axios({
   url: `http://localhost:8000/getCourseIdOffline`,
   method: "post",
   data: { courseName: oldCourse }
  })
  console.log(id.data.id[0].course_code)
  var oldType=oldtype;
  console.log(oldType)
   const data=await axios({
      url: `http://localhost:8000/updateStudentDataOffline`,
      method: "post",
      data: {roll:roll,semester:semester,branch:branch,email:email,oldType:oldType,type:type,id:id.data.id[0].course_code,oldId:oldId}
   })
   console.log(data)
  // Call your update API here
  // This is a placeholder - you'll need to implement the actual API call
  //console.log('Updating student:', { id, name, semester, branch, email, type, courseName });

  // Close the modal
  $('#editModal').modal('hide');

  // Refresh the data
  getdata();
}

async function logout() {
         var data=await axios({
            "url": "http://localhost:8000/logout",
            "method": "post",

         })
         window.location.replace("http://localhost:8000/");
         
      }

function confirmDelete(email,id,type,semester) {
  Swal.fire({
    title: 'Are you sure?',
    text: "You won't be able to revert this!",
    icon: 'warning',
    showCancelButton: true,
    confirmButtonColor: '#3085d6',
    cancelButtonColor: '#d33',
    confirmButtonText: 'Yes, delete it!'
  }).then((result) => {
    if (result.isConfirmed) {
      deleteStudent(email,id,type,semester);
    }
  });
}
function editStudent(rollNumber, name, semester, branch, email, type, courseName, facultyName, facultyEmail, academicYear,course_id) {
  document.getElementById('editRollNumber').value = rollNumber;
  document.getElementById('editName').value = name;
  document.getElementById('editSemester').value = semester;
  document.getElementById('editBranch').value = branch;
  document.getElementById('editEmail').value = email;
  document.getElementById('editType').value = type;
  document.getElementById('editCourseName').value = courseName;
  document.getElementById('editAcademicYear').value = academicYear;
  oldcourse=courseName;
  oldtype=type;
  $('#editModal').modal('show');
}

async function deleteStudent(email,id,type,semester) {
  try {
    const response = await axios.post('http://localhost:8000/deleteStudentDataOffline', { email:email,id:id,type:type,semester:semester });
    if (response.data.deleted === 1) {
      Swal.fire(
        'Deleted!',
        'The student has been deleted.',
        'success'
      );
      getdata(); // Refresh the data
    } else {
      Swal.fire(
        'Error',
        'There was an error deleting the student.',
        'error'
      );
    }
  } catch (error) {
    console.error('Error deleting student:', error);
    Swal.fire(
      'Error',
      'There was an error deleting the student.',
      'error'
    );
  }
}

$('#uploadCsvInput').change(function(event) {
                var file = event.target.files[0];
                if (file) {
                    var formData = new FormData();
                    formData.append('file', file);

                    $.ajax({
                        url: '/upload-csv',
                        type: 'POST',
                        data: formData,
                        processData: false,
                        contentType: false,
                        success: function(response) {
                            alert('CSV uploaded successfully!');
                        },
                        error: function(xhr, status, error) {
                            alert('Error uploading CSV: ' + error);
                        }
                    });
                }
            });

   </script>
   <!-- <script>
      document.getElementById('autoAllocateBtn').addEventListener('click', function() {
          this.disabled = true;
          this.textContent = 'Processing...';
          document.getElementById('result').textContent = '';
  
          fetch('/api/auto-allocate-offline-courses', {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json',
              },
          })
          .then(response => response.json())
          .then(data => {
              if (data.success) {
                  document.getElementById('result').textContent = 'Auto allocation completed successfully!';
                  document.getElementById('result').style.color = 'green';
              } else {
                  document.getElementById('result').textContent = 'Error: ' + data.message;
                  document.getElementById('result').style.color = 'red';
              }
          })
          .catch(error => {
              console.error('Error:', error);
              document.getElementById('result').textContent = 'An error occurred. Please try again.';
              document.getElementById('result').style.color = 'red';
          })
          .finally(() => {
              this.disabled = false;
              this.textContent = 'Start Auto Allocation';
          });
      });
  </script> -->
   <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</body>

</html>